#!/bin/bash

#########################################################################################
#
# This script provides different setup routines usually executed on newly
# installed ubuntu system (tested with xubuntu and elementary os systems
# since there is no essential difference between them in terms of system libraries)
#
#########################################################################################

#########################################################################################
#
# Control codes for colored output
#
#########################################################################################

INFO=$(tput setaf 6)
ALERT=$(tput setaf 1)
HIGH=$(tput setaf 5)
NC=$(tput sgr0)

#########################################################################################
#
# System vars
#
#########################################################################################

USERNAME=$(env | grep SUDO_USER | sed 's/.*=//')    # name of the sudo user
UGROUP=$(id -gn $USERNAME)                          # name of the sudo group
CORES=$(nproc)                                      # number of physical cores

#########################################################################################
#
# Some working paths
#
#########################################################################################

OPTDIR=/opt
MAKEDIR=$HOME/linux-distr
LOG=./setup.log

JUNKDIRS=( $HOME/Videos $HOME/Pictures $HOME/Music $HOME/Documents )
WORKDIRS=( $HOME/sharespace $HOME/dev $HOME/dev/java $HOME/dev/android
           $HOME/dev/shell $HOME/dev/python $HOME/dev/web $HOME/.npm-global $MAKEDIR  )

#########################################################################################
#
# Repositories & soft list
#
#########################################################################################

SOURCE="4.15.0"
JDK_VER="11"

CORE="linux-source-$SOURCE binutils autoconf automake libtool checkinstall openssl"

LIBS="libcurl4-openssl-dev libssl-dev libc6:i386 libncurses5:i386
      libstdc++6:i386 lib32z1 libbz2-1.0:i386 libgtk2.0-dev libgtk-3-dev
      libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev
      libx264-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libv4l-dev
      libtiff5-dev libdc1394-22-dev libatlas-base-dev gfortran
      tcl-dev tk-dev python-tk python3-tk libcupti-dev libglu1-mesa-dev
      libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libboost-all-dev
      libboost-python-dev freeglut3 freeglut3-dev python3-dev"

DEV="build-essential openjdk-$JDK_VER-jdk ant maven vim"

UTILS="htop pkg-config software-properties-gtk dconf-tools gdb m4
       python3-software-properties software-properties-common mesa-utils 
       apt-transport-https ca-certificates mesa-utils-extra xserver-xorg-dev
       ssh curl nfs-kernel-server nfs-common seahorse unzip unrar keepass2
       postgresql postgresql-contrib pgadmin3 libinput-tools xdotool guake cmake
       python-pip python3-pip"

CUSTOM_SOFT="git google-chrome-stable sublime-text docker-ce
             gimp gimp-data gimp-plugin-registry gimp-data-extras
             libreoffice libreoffice-gtk3 code nodejs"

PURGE_SOFT="modemmanager pidgin catfish gnome-mines
            gnome-sudoku xfburn gigolo mousepad thunderbird
            sgt-launcher sgt-puzzles" 

#########################################################################################
#
# Archives URLs which need to be updated with new versions releases
#
#########################################################################################

SOURCE_SOFT=( gradle skype postman libinput npm )

GRADLE_URL="https://downloads.gradle.org/distributions/gradle-5.1.1-all.zip"
SKYPE_URL="https://repo.skype.com/latest/skypeforlinux-64.deb"
POSTMAN_URL="https://dl.pstmn.io/download/latest/linux64"
LIBINPUT_URL="http://github.com/bulletmark/libinput-gestures"
NVM_URL="https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh"

#########################################################################################
#
# Check if the system needs reboot
#
#########################################################################################

check_reboot() {
    printf "\n" 
    if [ -f /var/run/reboot-required ]; then
        printf "${ALERT} - Reboot required. Halt.${NC}\n"
        exit 0
    fi;
}

#########################################################################################
#
# Run command with one line output
#
#########################################################################################

run-one-line() {
    COLS=$(($(tput cols)-10))
    $1 | while IFS= read -r line
    do
        echo -ne "\r\033[K\t${line:0:$COLS}"
    done
    return ${PIPESTATUS[0]}
}

#########################################################################################
#
# Purge unnecessary packages
#
#########################################################################################

cleanup() {
    printf "${INFO} - Purging unnecessary packages...${NC}\n"
    update_index
    run-one-line "apt-get purge $PURGE_SOFT -y"

    run-one-line "apt-get autoremove -y"
    run-one-line "apt-get autoclean -y"
    check_reboot
}

#########################################################################################
#
# Upgrade the system to the latest state
#
#########################################################################################

update_index() {
    printf "${INFO}\tUpdating cache... ${NC}"
    apt-get update > /dev/null
    printf "${INFO}Done${NC}\n"
}

upgrade() {
    printf "${INFO} - Upgrading default packages...${NC}\n"
    update_index
    run-one-line "apt-get dist-upgrade -y"
    check_reboot
}

#########################################################################################
#
# Install required libraries, utilities and software from default repositories
#
#########################################################################################

install_defaults() {
    printf "${INFO} - Installing libraries and soft from default repositories... ${NC}\n"
    update_index
    run-one-line "apt-get install $CORE $LIBS $DEV $UTILS -y"
    check_reboot
}

#########################################################################################
#
# Install some additional repositories
#
#########################################################################################

add_repos() {
    printf "${INFO} - Setting up 3rd party repositories...${NC}\n"
    update_index

    ######################################################################
    # CHROME REPO
    ######################################################################
    if ! apt-cache policy | grep google > /dev/null; then
        printf "${INFO}\tAdding Google Chrome repo... ${NC}"
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - >> $LOG 2>&1
        sh -c 'printf "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list' >> $LOG 2>&1
        printf "${INFO}Done${NC}\n"
    else
        printf "${INFO}\tGoogle Chrome repo is already there${NC}\n"
    fi

    ######################################################################
    # NODE REPO
    ######################################################################
    if ! apt-cache policy | grep node > /dev/null; then
        printf "${INFO}\tAdding NodeJS repo... ${NC}"
        curl -sL https://deb.nodesource.com/setup_11.x -o nodesource_setup.sh
        bash nodesource_setup.sh >> $LOG 2>&1
        rm nodesource_setup.sh
        printf "${INFO}Done${NC}\n"
    else
        printf "${INFO}\tNodeJS repo is already there${NC}\n"
    fi


    ######################################################################
    # VS CODE REPO
    ######################################################################
    if ! apt-cache policy | grep vscode > /dev/null; then
        printf "${INFO}\tAdding VS Code repo... ${NC}"
        curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo -H gpg --dearmor > /etc/apt/trusted.gpg.d/microsoft.gpg
        sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list' >> $LOG 2>&1
        printf "${INFO}Done${NC}\n"
    else
        printf "${INFO}\tVS Code repo is already there${NC}\n"
    fi

    ######################################################################
    # DOCKER REPO
    ######################################################################
    if ! apt-cache policy | grep docker > /dev/null; then
        printf "${INFO}\tAdding Docker repo... ${NC}"
        echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" >> /etc/apt/sources.list.d/docker.list
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - >> $LOG 2>&1
        printf "${INFO}Done${NC}\n"
    else
        printf "${INFO}\tDocker repo is already there${NC}\n"
    fi 

    ######################################################################
    # SUBLIME REPO
    ######################################################################
    if ! apt-cache policy | grep sublime > /dev/null; then
        printf "${INFO}\tAdding Sublime Text repo... ${NC}"
        wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | apt-key add - >> $LOG 2>&1
        apt-add-repository "deb https://download.sublimetext.com/ apt/stable/" --yes >> $LOG 2>&1 
        printf "${INFO}Done${NC}\n"
    else
        printf "${INFO}\tSublime Text repo is already there${NC}\n"
    fi

    ######################################################################
    # NVIDIA REPO
    ######################################################################
    if ! apt-cache policy | grep graphics > /dev/null; then
        printf "${INFO}\tAdding Nvidia repo... ${NC}"
        apt-add-repository ppa:graphics-drivers/ppa --yes >> $LOG 2>&1 
        printf "${INFO}Done${NC}\n"
    else
        printf "${INFO}\tNvidia repo is already there${NC}\n"
    fi

    ######################################################################
    # LIBRE OFFICE REPO
    ######################################################################
    if ! apt-cache policy | grep libreoffice > /dev/null; then
        printf "${INFO}\tAdding LibreOffice repo... ${NC}"
        apt-add-repository ppa:libreoffice/ppa --yes >> $LOG 2>&1 
        printf "${INFO}Done${NC}\n"
    else
        printf "${INFO}\tLibreOffice repo is already there${NC}\n"
    fi

    ######################################################################
    # GIT REPO
    ######################################################################
    if ! apt-cache policy | grep git-core > /dev/null; then
        printf "${INFO}\tAdding Git repo... ${NC}"
        apt-add-repository ppa:git-core/ppa --yes >> $LOG 2>&1 
        printf "${INFO}Done${NC}\n"
    else
        printf "${INFO}\tGit repo is already there${NC}\n"
    fi     

    update_index
}

#########################################################################################
#
# Install required libraries, utilities and software from custom repositories
#
#########################################################################################

install_customs() {
    printf "${INFO} - Installing soft from custom repositories... ${NC}\n"
    update_index
    run-one-line "apt-get install $CUSTOM_SOFT -y"

    check_reboot
}

#########################################################################################
#
# Install nvidia graphics drivers
#
#########################################################################################

install_nvidia() {

    if ! dpkg -l | grep nvidia > /dev/null; then
	    read -p "Do you want to install NVIDIA drivers? " -n 1 -r
	    echo
    	if [[ $REPLY =~ ^[Yy]$ ]]
    	then	
	    	printf "${INFO} - Installing graphics drivers...${NC}\n"
	        printf "${INFO}\tAvailable driver versions:\n"
	        printf "========================\n"
	        apt-cache search ^nvidia-[0-9] | grep -vE 'dev|updates|headless|uvm'
	        printf "========================${NC}"

	        RC=1
	        ERR_MSG=""

	        while [ $RC -ne 0 ]; do
	            echo -e $ERR_MSG
	            printf "${INFO}\tPick a version: ${NC}"
	            read ver
	            run-one-line "apt-get install nvidia-$ver nvidia-settings -y"
	            RC=$?
	            ERR_MSG="${ALERT}\r\033[K\tWrong driver version${NC}"
	        done

	        printf "${INFO}\tInstallation complete. Configuring...${NC}\n"
	        nvidia-xconfig >> $LOG 2>&1
	        touch /var/run/reboot-required # just to be sure because we need reboot
	        check_reboot
    	fi
    else
        printf "${INFO}\tThe driver is already installed${NC}\n"
    fi
}

#########################################################################################
#
# Install soft from source destribution (extract & run)
#
#########################################################################################

install_gradle() {
    if [ ! $(ls $OPTDIR | grep 'gradle') ]; then
        arch=gradle.zip
        printf "${INFO}\tDownloading... ${NC}\n"
        curl -# -o $arch $GRADLE_URL
        printf "${INFO}\tUnpacking... ${NC}\n"

        unzip -qq -d $OPTDIR $arch
        gradle_root=$(unzip -qql $arch | sed -r '1 {s/([ ]+[^ ]+){3}\s+//;q}')
        chown -R $USERNAME $OPTDIR/$gradle_root
        echo 'export PATH="$PATH:/opt/'$gradle_root'bin"' >> $HOME/.profile
        source $HOME/.profile    

        rm $arch
    else
        printf "${INFO}\tGradle is in place...${NC}\n"
    fi
}

install_skype() {
    if [ -z $(which skypeforlinux) ]; then 
        arch=skype.deb

        printf "${INFO}\tDownloading... ${NC}\n"
        curl -# -o $arch $SKYPE_URL
        printf "${INFO}\tInstalling... ${NC}\n"
        dpkg -i $arch >> $LOG 2>&1

        rm $arch
    else
        printf "${INFO}\tSkype is in place...${NC}\n"
    fi
}

install_postman() {
    if [ ! $(ls $OPTDIR | grep 'Postman') ]; then 
        arch=postman.tar.gz
        
        printf "${INFO}\tDownloading... ${NC}\n"
        curl -# -o $arch $POSTMAN_URL
        printf "${INFO}\tUnpacking... ${NC}\n"
        tar xf $arch -C $OPTDIR
        chown -R $USERNAME $OPTDIR/$(tar tzf $arch | sed -e 's@/.*@@' | uniq)
      
        echo "[Desktop Entry]" > /usr/share/applications/postman.desktop
        echo "  Name=Postman" >> /usr/share/applications/postman.desktop
        echo "  Type=Application" >> /usr/share/applications/postman.desktop
        echo "  Exec=/opt/Postman/Postman" >> /usr/share/applications/postman.desktop
        echo "  Terminal=false" >> /usr/share/applications/postman.desktop
        echo "  Icon=/opt/Postman/resources/app/assets/icon.png" >> /usr/share/applications/postman.desktop
        echo "  Comment=" >> /usr/share/applications/postman.desktop
        echo "  NoDisplay=false" >> /usr/share/applications/postman.desktop
        echo "  Categories=Development;" >> /usr/share/applications/postman.desktop

        rm $arch
    else
        printf "${INFO}\tPostman is in place...${NC}\n"
    fi
}

install_libinput() {
    if [ -z $(which libinput-gestures) ]; then 
        pushd $MAKEDIR > /dev/null 

        printf "${INFO}\tDownloading... ${NC}\n"
        git clone $LIBINPUT_URL >> $LOG 2>&1

        pushd ./libinput-gestures > /dev/null
        make install -j$CORES >> $LOG 2>&1
        gpasswd -a $USERNAME input >> $LOG 2>&1

        cp /etc/libinput-gestures.conf $HOME/.config/
        sed -n 's/^/# /' $HOME/.config/libinput-gestures.conf
        echo "gesture swipe left  xdotool key ctrl+alt+Left" >> $HOME/.config/libinput-gestures.conf
        echo "gesture swipe right xdotool key ctrl+alt+Right" >> $HOME/.config/libinput-gestures.conf

        popd > /dev/null
        popd > /dev/null

        printf "${INFO}\tReboot the machine for the gestures changes to take effect ${NC} \n"

    else
        printf "${INFO}\tLibinput is in place...${NC}\n"
    fi
}


install_npm() {
    npm i -g npm >> $LOG 2>&1
}

#########################################################################################
#
# Main routine for installations above
#
#########################################################################################

install_archives() {
    archs=("$@")
    for name in "${archs[@]}"; do
        printf "${INFO} - Setting up $name...${NC}\n"
        install_$name
        printf "${INFO}\tDone${NC}\n"
    done   
}

#########################################################################################
#
# Setup different config files for git, nfs etc. I use hardcore copy-pase here from
# my current configs
#
#########################################################################################

configs() {

    printf "${INFO} - Setting up config files...${NC}\n"

    localectl set-locale LANG=en_US.utf8

    # Display line numbers in vim

    echo "set number" > ~/.vimrc

    # Setup aliases

    if [[ ! $(cat $HOME/.bashrc | grep 'custom aliases') ]]; then
        echo -e "\n# custom aliases" >> $HOME/.bashrc
        echo "alias upd='sudo apt-get update'" >> $HOME/.bashrc
        echo "alias upg='sudo apt-get update && sudo apt-get upgrade'" >> $HOME/.bashrc
        echo "alias gh='git hist'" >> $HOME/.bashrc
        echo "alias nvidia-ver='nvidia-settings -q NvidiaDriverVersion'" >> $HOME/.bashrc
        echo "alias python=python3" >> $HOME/.bashrc
        echo "alias pip=pip3" >> $HOME/.bashrc
        echo "alias dirsize='du -hs'" >> $HOME/.bashrc
        echo -e "\ncheck-reboot() {" >> $HOME/.bashrc
        echo "  if [[ -f /var/run/reboot-required ]]; then" >> $HOME/.bashrc
        echo "    printf \"\$(tput setaf 1)Reboot required \$(tput sgr0)\n\"" >> $HOME/.bashrc
        echo "  else" >> $HOME/.bashrc
        echo "    printf \"\$(tput setaf 6)Reboot is not required \$(tput sgr0)\n\"" >> $HOME/.bashrc
        echo "  fi" >> $HOME/.bashrc
        echo "}" >> $HOME/.bashrc

        echo -e "\nparse_git_branch () {" >> $HOME/.bashrc
        echo "  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'" >> $HOME/.bashrc
        echo "}" >> $HOME/.bashrc
        echo 'export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "' >> $HOME/.bashrc
    fi

    # Setup git

    echo -e "[user]" > $HOME/.gitconfig
    echo -e "  name = Oleg Musienko" >> $HOME/.gitconfig
    echo -e "  email = Diogen737@gmail.com" >> $HOME/.gitconfig
    echo -e "[gc]" >> $HOME/.gitconfig
    echo -e "  autoDetach = false" >> $HOME/.gitconfig
    echo -e "[color]" >> $HOME/.gitconfig
    echo -e "  ui = true" >> $HOME/.gitconfig
    echo -e "[core]" >> $HOME/.gitconfig
    echo -e "  editor = vim" >> $HOME/.gitconfig
    echo -e "[alias]" >> $HOME/.gitconfig
    echo -e "  merc = merge --no-ff" >> $HOME/.gitconfig
    echo -e "  st = status" >> $HOME/.gitconfig
    echo -e "  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short -n 20" >> $HOME/.gitconfig
    echo -e "[merge]" >> $HOME/.gitconfig
    echo -e "  conflictstyle = diff3" >> $HOME/.gitconfig
    echo -e "[color \"branch\"]" >> $HOME/.gitconfig
    echo -e "  current = yellow reverse" >> $HOME/.gitconfig
    echo -e "  local = yellow" >> $HOME/.gitconfig
    echo -e "  remote = green" >> $HOME/.gitconfig
    echo -e "[color \"diff\"]" >> $HOME/.gitconfig
    echo -e "  meta = yellow bold" >> $HOME/.gitconfig
    echo -e "  frag = magenta bold" >> $HOME/.gitconfig
    echo -e "  old = red bold" >> $HOME/.gitconfig
    echo -e "  new = green bold" >> $HOME/.gitconfig
    echo -e "[color \"status\"]" >> $HOME/.gitconfig
    echo -e "  added = yellow" >> $HOME/.gitconfig
    echo -e "  changed = green" >> $HOME/.gitconfig
    echo -e "  untracked = cyan" >> $HOME/.gitconfig

    # Setup LAN

    echo "192.168.0.111   mk1" > /etc/hosts
    echo "192.168.0.112   mk2" >> /etc/hosts

    printf "${INFO} - Setting up directories...${NC}\n"

    for i in "${JUNKDIRS[@]}"; do 
        rm -rf $i
    done

    for i in "${WORKDIRS[@]}"; do
        if [[ ! -d $i ]]; then
            mkdir $i
            chown -R $USERNAME:$UGROUP $i
            chmod -R 775 $i
        fi
    done
}




#########################################################################################
# 
# Main routine 
#
#########################################################################################


if [[ $EUID -ne "0" ]]; then
    printf "${ALERT}The script must be run as root. Abort. ${NC}\n"
    exit 1
fi

if [[ $(lsb_release -i) =~ "Distributor ID: Ubuntu" ]]; then
    printf "${ALERT}This script is for Ubuntu systems only. Abort. ${NC}\n"
    exit 1
fi


printf "${INFO}========================\n"
printf "Ubuntu system:\n"
printf "\t$(lsb_release -i)\n\t$(lsb_release -d)\n\t$(lsb_release -r)\n\t$(lsb_release -c)\n"
printf "========================\n"
printf "Working... ${NC} \n\n"

# Set Ubuntu packages source from main server
sed -i 's|http://us.|http://|g' /etc/apt/sources.list
sed -i 's|http://ru.|http://|g' /etc/apt/sources.list

case "$1" in
    ""|"--all")
        cleanup
        upgrade
        install_defaults
        add_repos
        install_customs
        configs
        install_archives "${SOURCE_SOFT[@]}"
        install_nvidia;;
    "--cleanup")
        cleanup;;
    "--repos")
        add_repos;;
    "--defaults")
        install_defaults;;
    "--custom")
        install_customs;;
    "--nvidia")
        install_nvidia;;
    "--skype")
        SOURCE_SOFT=( skype )
        install_archives "${SOURCE_SOFT[@]}";;    
    "--postman")
        SOURCE_SOFT=( postman )
        install_archives "${SOURCE_SOFT[@]}";;        
    "--gradle")
        SOURCE_SOFT=( gradle )  
        install_archives "${SOURCE_SOFT[@]}";;
    "--libinput")
        SOURCE_SOFT=( libinput )  
        install_archives "${SOURCE_SOFT[@]}";;
    "--config")
        configs;;
    *)
        printf "${ALERT}Usage: elementary-setup [--all | --cleanup | --repos | -defaults | --custom | --nvidia | --skype | --postman | --gradle | --libinput | --config]\n"
        printf "Running with no arguments is equal to --all. The script must be run as root. ${NC}\n";;
esac

# rm -f $LOG

# Restore access to local config store

chown -R $USERNAME:$UGROUP $HOME/.config
